{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/forecast-details.js","components/search-form.js","App.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","data-testid","moment","date","format","name","iconId","icon","temperature","description","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","SearchForm","type","placeholder","onChange","event","setSearchText","target","value","searchText","onSearch","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","App","useState","setForecasts","location","setLocation","selectedDate","setSelectedDate","load","setLoad","modalIsOpen","setIsOpen","openModal","selectedForecast","find","useEffect","axios","get","then","response","data","catch","err","alert","isOpen","onRequestClose","style","contentLabel","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6fad286.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/location-details.css'\n\nconst LocationDetails = props => \n  <div>\n     <h1 className='location-details'>\n      {props.city}, {props.country} \n    </h1>\n  </div>\n \nLocationDetails.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n};\n\nexport default LocationDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/forecast-summary.css'\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\n\nconst ForecastSummary = props => {\n  return (\n  \n    <div className=\"forecast-summary\">\n      <div className=\"date\" data-testid=\"date-id\">\n        {moment(props.date).format('dddd Do MMM')}\n      </div>\n      <div className=\"icon\" data-testid=\"icon-id\">\n        <WeatherIcon name=\"owm\" iconId={props.icon}/>\n      </div>\n      <div className=\"temperature\" data-testid=\"temperature-id\">\n        {props.temperature}&deg;c\n      </div>\n      <div className=\"description\" data-testid=\"description-id\">\n        {props.description}\n      </div>\n      <button onClick={() => props.onSelect(props.date)}>More details</button>\n    </div>\n  \n  )\n};\n\nForecastSummary.propTypes = {\n  forecast: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    icon: PropTypes.object.isRequired,\n    temperature: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n    onSelect: PropTypes.func,\n  }),\n};\n\nexport default ForecastSummary;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastSummary from './forecast-summary'\nimport '../styles/forecast-summaries.css'\n\nconst ForecastSummaries = (props) => (\n  <div className=\"forecast-summaries\">\n    {props.forecasts.map((forecast) => (\n        <ForecastSummary\n          key={forecast.date}\n          date={forecast.date}\n          icon={forecast.icon}\n          description={forecast.description}\n          temperature={forecast.temperature.max}\n          onSelect={props.onForecastSelect}\n        />\n    ))}\n  </div>\n)\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.array.isRequired,\n  onSelect: PropTypes.func,\n}\n\n\nexport default ForecastSummaries;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport \"../styles/forecast-details.css\";\n\nconst ForecastDetails = (props) => {\n\n  return (\n    <div className=\"forecast-details\">\n      <h3 className=\"detailed-date\">\n        {moment(props.forecast.date).format(\"dddd Do MMM\")}\n      </h3>\n      <div className=\"detailed-temperature\">\n        <div className=\"max-temp\">\n          Max Temperature: {props.forecast.temperature.max}&deg;c\n        </div>\n        <div className=\"min-temp\">\n          Min Temperature: {props.forecast.temperature.min}&deg;c\n        </div>\n      </div>\n      <div className=\"detailed-humidity\">\n        Humidity: {props.forecast.humidity}%\n      </div>\n      <div className=\"detailed-wind\">Wind: {props.forecast.wind.speed}mph</div>\n    </div>\n  );\n};\n\nForecastDetails.propTypes = {\n  forecast: PropTypes.object.isRequired,\n};\n\nexport default ForecastDetails;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/search-form.css\";\n\nconst SearchForm = (props) => {\n  const handleInputChange = (event) => {\n    props.setSearchText(event.target.value);\n  };\n\n  return (\n    <div className=\"search-form\">\n      <input\n        className=\"input\"\n        data-testid=\"input-id\"\n        type=\"text\"\n        placeholder=\"Search for city..\"\n        onChange={handleInputChange}\n        value={props.searchText}\n      />\n      <button\n        className=\"button\"\n        data-testid=\"button-id\"\n        onClick={() => props.onSearch(props.searchText)}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n};\n\nexport default SearchForm;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport LocationDetails from \"./components/location-details\";\nimport ForecastSummaries from \"./components/forecast-summaries\";\nimport ForecastDetails from \"./components/forecast-details\";\nimport SearchForm from \"./components/search-form\";\nimport \"./styles/app.css\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement('#root')\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst App = () => {\n  const [forecasts, setForecasts] = useState([]);\n\n  const [location, setLocation] = useState({\n    city: \"\",\n    country: \"\",\n  });\n\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const [searchText, setSearchText] = useState(\"\");\n\n  const [load, setLoad] = useState(false);\n\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const { city, country } = location;\n\n  const selectedForecast = forecasts.find(\n    (forecast) => forecast.date === selectedDate\n  );\n\n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n    setIsOpen(openModal)\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"https://mcr-codes-weather.herokuapp.com/forecast/\")\n      .then((response) => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n        setLoad(true);\n      })\n      .catch(err => {\n        alert(\"Server error.\");\n        setLoad(true)\n    })\n  }, []);\n\n  const findCity = () => {\n    axios\n      .get(\n        `https://mcr-codes-weather.herokuapp.com/forecast?city=${searchText}`\n      )\n      .then((response) => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n        setLoad(true);\n      })\n      .catch(err => {\n        alert('The city could not be found.')\n        setLoad(true);\n      });\n  };\n\n  if(load) {\n    return (\n      <div className=\"forecast\">\n        <LocationDetails city={city} country={country} />\n        <SearchForm\n          onSearch={findCity}\n          searchText={searchText}\n          setSearchText={setSearchText}\n        />\n        <ForecastSummaries\n          forecasts={forecasts}\n          onForecastSelect={handleForecastSelect}\n        />\n        <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        {selectedForecast && <ForecastDetails forecast={selectedForecast} />}\n      </Modal>\n        \n      </div>\n    );\n  } else {\n    return (\n      <div>\n          Loading...\n      </div>\n  );\n  }\n  \n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}